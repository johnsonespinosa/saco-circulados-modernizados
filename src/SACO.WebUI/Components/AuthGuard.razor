@inject IUserContext UserContext
@inject NavigationManager NavigationManager

@if (UserContext.GetCurrentUser() is null)
{
    <RedirigirLogin />
}
else if (!HasRoleAllowed())
{
    <Redirigir403 />
}
else
{
    @ChildContent
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string RolesAllowed { get; set; } = string.Empty;

    private bool HasRoleAllowed()
    {
        var rolActual = UserContext.GetCurrentUser()?.Rol;
        var roles = RolesAllowed.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        return roles.Any(r => string.Equals(r, rolActual, StringComparison.OrdinalIgnoreCase));
    }

    private void RedirectLogin()
    {
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    private void Redirect403()
    {
        NavigationManager.NavigateTo("/403", forceLoad: true);
    }
}
